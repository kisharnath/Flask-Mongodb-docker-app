# Directory structure
.
├── Dockerfile
├── docker-compose.yml
├── requirements.txt
├── app
│   ├── __init__.py
│   ├── models.py
│   ├── routes.py
│   └── templates
│       ├── base.html
│       ├── create.html
│       ├── edit.html
│       └── index.html

# requirements.txt
Flask==2.3.3
pymongo==4.6.0
python-dotenv==1.0.0
Flask-PyMongo==2.3.0

# Dockerfile
FROM python:3.9-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["python", "run.py"]

# docker-compose.yml
version: '3.8'
services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - MONGODB_URI=mongodb://mongo:27017/crud_app
    depends_on:
      - mongo
    volumes:
      - .:/app
  
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

volumes:
  mongodb_data:

# app/__init__.py
from flask import Flask
from flask_pymongo import PyMongo
from os import environ

app = Flask(__name__)
app.config["MONGO_URI"] = environ.get("MONGODB_URI", "mongodb://localhost:27017/crud_app")
app.config["SECRET_KEY"] = environ.get("SECRET_KEY", "your-secret-key")
mongo = PyMongo(app)

from app import routes

# app/models.py
from app import mongo
from bson import ObjectId

class Item:
    @staticmethod
    def get_all():
        return list(mongo.db.items.find())
    
    @staticmethod
    def get_by_id(item_id):
        return mongo.db.items.find_one({"_id": ObjectId(item_id)})
    
    @staticmethod
    def create(name, description):
        return mongo.db.items.insert_one({
            "name": name,
            "description": description
        })
    
    @staticmethod
    def update(item_id, name, description):
        return mongo.db.items.update_one(
            {"_id": ObjectId(item_id)},
            {"$set": {"name": name, "description": description}}
        )
    
    @staticmethod
    def delete(item_id):
        return mongo.db.items.delete_one({"_id": ObjectId(item_id)})

# app/routes.py
from flask import render_template, request, redirect, url_for
from app import app
from app.models import Item

@app.route("/")
def index():
    items = Item.get_all()
    return render_template("index.html", items=items)

@app.route("/create", methods=["GET", "POST"])
def create():
    if request.method == "POST":
        name = request.form.get("name")
        description = request.form.get("description")
        Item.create(name, description)
        return redirect(url_for("index"))
    return render_template("create.html")

@app.route("/edit/<item_id>", methods=["GET", "POST"])
def edit(item_id):
    item = Item.get_by_id(item_id)
    if request.method == "POST":
        name = request.form.get("name")
        description = request.form.get("description")
        Item.update(item_id, name, description)
        return redirect(url_for("index"))
    return render_template("edit.html", item=item)

@app.route("/delete/<item_id>")
def delete(item_id):
    Item.delete(item_id)
    return redirect(url_for("index"))

# run.py
from app import app

if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=True)

# app/templates/base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flask MongoDB CRUD</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('index') }}">Flask MongoDB CRUD</a>
        </div>
    </nav>
    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

# app/templates/index.html
{% extends "base.html" %}

{% block content %}
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Items</h1>
    <a href="{{ url_for('create') }}" class="btn btn-primary">Create New Item</a>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        {% for item in items %}
        <tr>
            <td>{{ item.name }}</td>
            <td>{{ item.description }}</td>
            <td>
                <a href="{{ url_for('edit', item_id=item._id) }}" class="btn btn-sm btn-warning">Edit</a>
                <a href="{{ url_for('delete', item_id=item._id) }}" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure?')">Delete</a>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>
{% endblock %}

# app/templates/create.html
{% extends "base.html" %}

{% block content %}
<h1>Create New Item</h1>
<form method="POST">
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <input type="text" class="form-control" id="name" name="name" required>
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
    <a href="{{ url_for('index') }}" class="btn btn-secondary">Cancel</a>
</form>
{% endblock %}

# app/templates/edit.html
{% extends "base.html" %}

{% block content %}
<h1>Edit Item</h1>
<form method="POST">
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <input type="text" class="form-control" id="name" name="name" value="{{ item.name }}" required>
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea class="form-control" id="description" name="description" rows="3" required>{{ item.description }}</textarea>
    </div>
    <button type="submit" class="btn btn-primary">Update</button>
    <a href="{{ url_for('index') }}" class="btn btn-secondary">Cancel</a>
</form>
{% endblock %}








